sudo: false
language: cpp

matrix:
  include:
    # - os: linux
    #   sudo: required
    #   services: docker
    #   env: DOCKER_IMAGE=debian:latest BUILD_SHARED_LIBS=ON CMAKE_BUILD_TYPE=Release
    # - os: linux
    #   sudo: required
    #   services: docker
    #   env: DOCKER_IMAGE=debian:latest BUILD_SHARED_LIBS=OFF CMAKE_BUILD_TYPE=Release
    #
    # - os: linux
    #   sudo: required
    #   services: docker
    #   env: DOCKER_IMAGE=ubuntu:latest BUILD_SHARED_LIBS=ON CMAKE_BUILD_TYPE=Release
    # - os: linux
    #   sudo: required
    #   services: docker
    #   env: DOCKER_IMAGE=ubuntu:latest BUILD_SHARED_LIBS=OFF CMAKE_BUILD_TYPE=Release
    #
    # - os: linux
    #   sudo: required
    #   services: docker
    #   env: DOCKER_IMAGE=fedora:latest BUILD_SHARED_LIBS=ON CMAKE_BUILD_TYPE=Release
    # - os: linux
    #   sudo: required
    #   services: docker
    #   env: DOCKER_IMAGE=fedora:latest BUILD_SHARED_LIBS=OFF CMAKE_BUILD_TYPE=Release
    #
    # - os: osx
    #   osx_image: xcode10.2
    #   env: BUILD_SHARED_LIBS=ON CMAKE_BUILD_TYPE=Release
    # - os: osx
    #   osx_image: xcode10.2
    #   env: BUILD_SHARED_LIBS=OFF CMAKE_BUILD_TYPE=Release

    - os: windows
      env: BUILD_SHARED_LIBS=ON CMAKE_BUILD_TYPE=Release
    - os: windows
      env: BUILD_SHARED_LIBS=OFF CMAKE_BUILD_TYPE=Release

    # - os: linux
    #   sudo: required
    #   services: docker
    #   env: DOCKER_IMAGE=debian:9 BUILD_SHARED_LIBS=OFF CMAKE_BUILD_TYPE=Coverage

before_install:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      docker run -d --name linux -v $(pwd):/travis $DOCKER_IMAGE tail -f /dev/null;
      docker ps
    fi

install:
  # install dependencies in debian like systems
  - |
    if [[ "$DOCKER_IMAGE" == *"ubuntu"* ||Â "$DOCKER_IMAGE" == *"debian"* ]]; then
      docker exec -t linux bash -c "apt-get update &&
      apt-get install -y build-essential cmake ninja-build libboost-dev"
    fi
  # install dependencies in red hat like systems
  - |
    if [[ "$DOCKER_IMAGE" == *"fedora"* ]]; then
      docker exec -t linux bash -c "dnf -y group install \"Development Tools\" \"C Development Tools and Libraries\" &&
      dnf -y install cmake ninja-build boost-devel"
    fi
  # install dependencies for coverage
  - |
    if [[ "$DOCKER_IMAGE" == *"debian"* && "${CMAKE_BUILD_TYPE}" == "Coverage" ]]; then
      docker exec -t linux bash -c "apt-get update &&
      apt-get install -y git python-pip &&
      pip install codecov"
    fi

script:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      docker exec -t linux bash -c "cd /travis;
      mkdir build && cd build && cmake -G Ninja -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS} .. &&
      ninja && ctest --output-on-failure"
    fi
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      cd "${TRAVIS_BUILD_DIR}"
      mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS} .. &&
      make -j2 && ctest --output-on-failure
    fi
  - |
    if [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then
      mkdir build && cd build &&
      wget -nv https://dl.bintray.com/boostorg/release/1.71.0/source/boost_1_71_0.7z &&
      7z x boost_1_71_0.7z -oc:\\ &&
      cmake .. &&
      cmake --build . --config ${CMAKE_BUILD_TYPE} -DBOOST_ROOT=c:\\boost_1_71_0 &&
      cmake --build . --target test --config ${CMAKE_BUILD_TYPE}
    fi

after_success:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CMAKE_BUILD_TYPE}" == "Coverage" ]]; then
      docker exec -t linux bash -c "cd /travis && codecov \
        --token ${CODECOV_UPLOAD_TOKEN} \
        --branch ${TRAVIS_BRANCH} \
        --build ${TRAVIS_JOB_NUMBER} \
        --pr ${TRAVIS_PULL_REQUEST} \
        --slug ${TRAVIS_REPO_SLUG} \
        --commit ${TRAVIS_COMMIT}"
    fi
